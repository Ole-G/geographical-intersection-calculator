function getIntersection(point1, brng1, point2, brng2) {
  // Split the points into latitudes and longitudes
  var point1Arr = point1.split(', ');
  var point2Arr = point2.split(', ');

  // Convert string coordinates to float
  var lat1 = parseFloat(point1Arr[0]);
  var lon1 = parseFloat(point1Arr[1]);
  var lat2 = parseFloat(point2Arr[0]);
  var lon2 = parseFloat(point2Arr[1]);

  // Convert degrees to radians
  lat1 = lat1 * Math.PI / 180.0;
  lon1 = lon1 * Math.PI / 180.0;
  lat2 = lat2 * Math.PI / 180.0;
  lon2 = lon2 * Math.PI / 180.0;
  brng1 = brng1 * Math.PI / 180.0;
  brng2 = brng2 * Math.PI / 180.0;

  var dLat = lat2 - lat1;
  var dLon = lon2 - lon1;

  var dist12 = 2 * Math.asin(Math.sqrt(Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2)));

  if (dist12 == 0) return null;

  // initial/final bearings between points
  var brngA = Math.acos((Math.sin(lat2) - Math.sin(lat1) * Math.cos(dist12)) / (Math.sin(dist12) * Math.cos(lat1)));

  if (isNaN(brngA)) brngA = 0;  // protect against rounding

  var brngB = Math.acos((Math.sin(lat1) - Math.sin(lat2) * Math.cos(dist12)) / (Math.sin(dist12) * Math.cos(lat2)));

  if (Math.sin(lon2 - lon1) > 0) {
    brng12 = brngA;
    brng21 = 2 * Math.PI - brngB;
  } else {
    brng12 = 2 * Math.PI - brngA;
    brng21 = brngB;
  }

  var alpha1 = (brng1 - brng12 + Math.PI) % (2 * Math.PI) - Math.PI;  // angle 2-1-3
  var alpha2 = (brng21 - brng2 + Math.PI) % (2 * Math.PI) - Math.PI;  // angle 1-2-3

  if (Math.sin(alpha1) == 0 && Math.sin(alpha2) == 0) return null;  // infinite intersections
  if (Math.sin(alpha1) * Math.sin(alpha2) < 0) return null;          // ambiguous intersection

  //it has a unique intersection
  var cosAlpha3 = -Math.cos(alpha1) * Math.cos(alpha2) +
                  Math.sin(alpha1) * Math.sin(alpha2) * Math.cos(dist12);

  var delta13 = Math.atan2(Math.sin(dist12) * Math.sin(alpha1) * Math.sin(alpha2), Math.cos(alpha2) + Math.cos(alpha1) * cosAlpha3);

  var lat3 = Math.asin(Math.sin(lat1) * Math.cos(delta13) +
                      Math.cos(lat1) * Math.sin(delta13) * Math.cos(brng1));

  var dLon13 = Math.atan2(Math.sin(brng1) * Math.sin(delta13) * Math.cos(lat1), Math.cos(delta13) - Math.sin(lat1) * Math.sin(lat3));

  var lon3 = lon1 + dLon13;
  lon3 = (lon3 + 3 * Math.PI) % (2 * Math.PI) - Math.PI;  // normalize to -180...+180

  return lat3 * 180 / Math.PI + ", " + lon3 * 180 / Math.PI;  // in degrees
}
